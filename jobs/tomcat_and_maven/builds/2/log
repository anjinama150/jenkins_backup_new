Started by user [8mha:////4L1rL13cQsIotT8v+YXHbOe79p/22085MGS6rQ8DtHvjAAAAlh+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAymEgYu/dLi1CL9xLysUgDpSLBjvwAAAA==[0mkr
Running as SYSTEM
Building remotely on [8mha:////4ALjWMJi/nhLbYBDojNP9XUrrXSeRn673hSUQQEDhk30AAAAmx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzWEgZ+/eT83ILSktQi/aTSzJwUAJvkr3/EAAAA[0mbuild in workspace /home/jenkins/workspace/tomcat_and_maven
The recommended git tool is: NONE
using credential build
 > git rev-parse --resolve-git-dir /home/jenkins/workspace/tomcat_and_maven/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/anjinama150/builds.git # timeout=10
Fetching upstream changes from https://github.com/anjinama150/builds.git
 > git --version # timeout=10
 > git --version # 'git version 2.34.1'
using GIT_ASKPASS to set credentials build
 > git fetch --tags --force --progress -- https://github.com/anjinama150/builds.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/main^{commit} # timeout=10
Checking out Revision dd2d6c36b82087b5d08ffbd434d4584df249fbc9 (refs/remotes/origin/main)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f dd2d6c36b82087b5d08ffbd434d4584df249fbc9 # timeout=10
Commit message: "first commit2"
 > git rev-list --no-walk dd2d6c36b82087b5d08ffbd434d4584df249fbc9 # timeout=10
[tomcat_and_maven] $ /bin/sh -xe /tmp/jenkins7574895248136070822.sh
+ pwd
/home/jenkins/workspace/tomcat_and_maven
+ ls
1.sh
2.sh
3.sh
README.md
+ sh 1.sh
enter the git clane
fatal: You must specify a repository to clone.

usage: git clone [<options>] [--] <repo> [<dir>]

    -v, --verbose         be more verbose
    -q, --quiet           be more quiet
    --progress            force progress reporting
    --reject-shallow      don't clone shallow repository
    -n, --no-checkout     don't create a checkout
    --bare                create a bare repository
    --mirror              create a mirror repository (implies bare)
    -l, --local           to clone from a local repository
    --no-hardlinks        don't use local hardlinks, always copy
    -s, --shared          setup as shared repository
    --recurse-submodules[=<pathspec>]
                          initialize submodules in the clone
    --recursive ...       alias of --recurse-submodules
    -j, --jobs <n>        number of submodules cloned in parallel
    --template <template-directory>
                          directory from which templates will be used
    --reference <repo>    reference repository
    --reference-if-able <repo>
                          reference repository
    --dissociate          use --reference only while cloning
    -o, --origin <name>   use <name> instead of 'origin' to track upstream
    -b, --branch <branch>
                          checkout <branch> instead of the remote's HEAD
    -u, --upload-pack <path>
                          path to git-upload-pack on the remote
    --depth <depth>       create a shallow clone of that depth
    --shallow-since <time>
                          create a shallow clone since a specific time
    --shallow-exclude <revision>
                          deepen history of shallow clone, excluding rev
    --single-branch       clone only one branch, HEAD or --branch
    --no-tags             don't clone any tags, and make later fetches not to follow them
    --shallow-submodules  any cloned submodules will be shallow
    --separate-git-dir <gitdir>
                          separate git dir from working tree
    -c, --config <key=value>
                          set config inside the new repository
    --server-option <server-specific>
                          option to transmit
    -4, --ipv4            use IPv4 addresses only
    -6, --ipv6            use IPv6 addresses only
    --filter <args>       object filtering
    --remote-submodules   any cloned submodules will use their remote-tracking branch
    --sparse              initialize sparse-checkout file to include only files at root

1.sh: 6: cd: can't cd to hello-world-war
1.sh: 7: mvn: not found
cp: cannot stat 'target/hello-world-war-1.0.0.war': No such file or directory
sh: 0: cannot open /opt/apache-tomcat-10.0.27/bin/shutdown.sh: Permission denied
1.sh: 10: sleep5: not found
sh: 0: cannot open /opt/apache-tomcat-10.0.27/bin/startup.sh: Permission denied
Finished: SUCCESS
